using k8s.Models;

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace com.appscode.voyager
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Voyager.
    /// </summary>
    public static partial class VoyagerExtensions
    {
            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static k8s.Models.V1APIGroupList GetAPIVersions(this IVoyager operations)
            {
                return operations.GetAPIVersionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1APIGroupList> GetAPIVersionsAsync(this IVoyager operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static k8s.Models.V1APIGroup GetAPIGroup(this IVoyager operations)
            {
                return operations.GetAPIGroupAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1APIGroup> GetAPIGroupAsync(this IVoyager operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static k8s.Models.V1APIResourceList GetAPIResources(this IVoyager operations)
            {
                return operations.GetAPIResourcesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1APIResourceList> GetAPIResourcesAsync(this IVoyager operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1CertificateList ListCertificateForAllNamespaces(this IVoyager operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListCertificateForAllNamespacesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateList> ListCertificateForAllNamespacesAsync(this IVoyager operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificateForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1IngressList ListIngressForAllNamespaces(this IVoyager operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListIngressForAllNamespacesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1IngressList> ListIngressForAllNamespacesAsync(this IVoyager operations, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListIngressForAllNamespacesWithHttpMessagesAsync(continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateList ListNamespacedCertificate(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedCertificateAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateList> ListNamespacedCertificateAsync(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedCertificateWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Certificate CreateNamespacedCertificate(this IVoyager operations, V1beta1Certificate body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedCertificateAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Certificate> CreateNamespacedCertificateAsync(this IVoyager operations, V1beta1Certificate body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedCertificateWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static k8s.Models.V1Status DeleteCollectionNamespacedCertificate(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedCertificateAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1Status> DeleteCollectionNamespacedCertificateAsync(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedCertificateWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Certificate ReadNamespacedCertificate(this IVoyager operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedCertificateAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Certificate> ReadNamespacedCertificateAsync(this IVoyager operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedCertificateWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Certificate ReplaceNamespacedCertificate(this IVoyager operations, V1beta1Certificate body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedCertificateAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Certificate> ReplaceNamespacedCertificateAsync(this IVoyager operations, V1beta1Certificate body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedCertificateWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static k8s.Models.V1Status DeleteNamespacedCertificate(this IVoyager operations, k8s.Models.V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedCertificateAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1Status> DeleteNamespacedCertificateAsync(this IVoyager operations, k8s.Models.V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedCertificateWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Certificate PatchNamespacedCertificate(this IVoyager operations, k8s.Models.V1Patch body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedCertificateAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Certificate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Certificate> PatchNamespacedCertificateAsync(this IVoyager operations, k8s.Models.V1Patch body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedCertificateWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1IngressList ListNamespacedIngress(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedIngressAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1IngressList> ListNamespacedIngressAsync(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedIngressWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress CreateNamespacedIngress(this IVoyager operations, V1beta1Ingress body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedIngressAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> CreateNamespacedIngressAsync(this IVoyager operations, V1beta1Ingress body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedIngressWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static k8s.Models.V1Status DeleteCollectionNamespacedIngress(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedIngressAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='continueParameter'>
            /// The continue option should be set when retrieving more results from the
            /// server. Since this value is server defined, clients may only use the
            /// continue value from a previous query result with identical query parameters
            /// (except for the value of continue) and the server may reject a continue
            /// value it does not recognize. If the specified continue value is no longer
            /// valid whether due to expiration (generally five to fifteen minutes) or a
            /// configuration change on the server the server will respond with a 410
            /// ResourceExpired error indicating the client must restart their list without
            /// the continue field. This field is not supported when watch is true. Clients
            /// may start a watch from the last resourceVersion value returned by the
            /// server and not miss any modifications.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='includeUninitialized'>
            /// If true, partially initialized resources are included in the response.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='limit'>
            /// limit is a maximum number of responses to return for a list call. If more
            /// items exist, the server will set the `continue` field on the list metadata
            /// to a value that can be used with the same initial query to retrieve the
            /// next set of results. Setting a limit may return fewer than the requested
            /// amount of items (up to zero items) in the event all requested objects are
            /// filtered out and clients should only use the presence of the continue field
            /// to determine whether more results are available. Servers may choose not to
            /// support the limit argument and will return all of the available results. If
            /// limit is specified and the continue field is empty, clients may assume that
            /// no more results are available. This field is not supported if watch is
            /// true.
            ///
            /// The server guarantees that the objects returned when using continue will be
            /// identical to issuing a single list call without a limit - that is, no
            /// objects created, modified, or deleted after the first request is issued
            /// will be included in any subsequent continued requests. This is sometimes
            /// referred to as a consistent snapshot, and ensures that a client that is
            /// using limit to receive smaller chunks of a very large result can ensure
            /// they see all possible objects. If objects are updated during a chunked list
            /// the version of the object that was present at the time the first list
            /// result was calculated is returned.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1Status> DeleteCollectionNamespacedIngressAsync(this IVoyager operations, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedIngressWithHttpMessagesAsync(namespaceParameter, continueParameter, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress ReadNamespacedIngress(this IVoyager operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedIngressAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> ReadNamespacedIngressAsync(this IVoyager operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress ReplaceNamespacedIngress(this IVoyager operations, V1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedIngressAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> ReplaceNamespacedIngressAsync(this IVoyager operations, V1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static k8s.Models.V1Status DeleteNamespacedIngress(this IVoyager operations, k8s.Models.V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedIngressAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy. Acceptable values are: 'Orphan' - orphan
            /// the dependents; 'Background' - allow the garbage collector to delete the
            /// dependents in the background; 'Foreground' - a cascading policy that
            /// deletes all dependents in the foreground.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<k8s.Models.V1Status> DeleteNamespacedIngressAsync(this IVoyager operations, k8s.Models.V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress PatchNamespacedIngress(this IVoyager operations, k8s.Models.V1Patch body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedIngressAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> PatchNamespacedIngressAsync(this IVoyager operations, k8s.Models.V1Patch body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
