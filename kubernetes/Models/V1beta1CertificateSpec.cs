// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace com.appscode.voyager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class V1beta1CertificateSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1beta1CertificateSpec class.
        /// </summary>
        public V1beta1CertificateSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1beta1CertificateSpec class.
        /// </summary>
        /// <param name="acmeUserSecretName">Secret contains ACMEUser
        /// information. Secret must contain a key `email` If empty tries to
        /// find an Secret via domains if not found create an ACMEUser and
        /// stores as a secret. Secrets key to be expected:
        /// ACME_EMAIL -&gt; required, if not provided it will through error.
        /// ACME_SERVER_URL -&gt; custom server url to generate certificates,
        /// default is lets encrypt.
        /// ACME_USER_DATA -&gt; user data, if not found one will be created
        /// for the provided email,
        /// and stored in the key.</param>
        /// <param name="challengeProvider">ChallengeProvider details to verify
        /// domains</param>
        /// <param name="acmeStagingURL">ACME server that will be used to
        /// obtain this certificate. Deprecated</param>
        /// <param name="domains">Tries to obtain a single certificate using
        /// all domains passed into Domains. The first domain in domains is
        /// used for the CommonName field of the certificate, all other domains
        /// are added using the Subject Alternate Names extension.</param>
        /// <param name="email">Deprecated</param>
        /// <param name="httpProviderIngressReference">This is the ingress
        /// Reference that will be used if provider is http Deprecated</param>
        /// <param name="provider">Following fields are deprecated and will
        /// removed in future version.
        /// https://github.com/appscode/voyager/pull/506 Deprecated. DNS
        /// Provider.</param>
        /// <param
        /// name="providerCredentialSecretName">ProviderCredentialSecretName is
        /// used to create the acme client, that will do needed processing in
        /// DNS. Deprecated</param>
        /// <param name="storage">Storage backend to store the certificates
        /// currently, kubernetes secret and vault.</param>
        public V1beta1CertificateSpec(string acmeUserSecretName, V1beta1ChallengeProvider challengeProvider, string acmeStagingURL = default(string), IList<string> domains = default(IList<string>), string email = default(string), V1beta1LocalTypedReference httpProviderIngressReference = default(V1beta1LocalTypedReference), string provider = default(string), string providerCredentialSecretName = default(string), V1beta1CertificateStorage storage = default(V1beta1CertificateStorage))
        {
            AcmeStagingURL = acmeStagingURL;
            AcmeUserSecretName = acmeUserSecretName;
            ChallengeProvider = challengeProvider;
            Domains = domains;
            Email = email;
            HttpProviderIngressReference = httpProviderIngressReference;
            Provider = provider;
            ProviderCredentialSecretName = providerCredentialSecretName;
            Storage = storage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ACME server that will be used to obtain this
        /// certificate. Deprecated
        /// </summary>
        [JsonProperty(PropertyName = "acmeStagingURL")]
        public string AcmeStagingURL { get; set; }

        /// <summary>
        /// Gets or sets secret contains ACMEUser information. Secret must
        /// contain a key `email` If empty tries to find an Secret via domains
        /// if not found create an ACMEUser and stores as a secret. Secrets key
        /// to be expected:
        /// ACME_EMAIL -&amp;gt; required, if not provided it will through
        /// error.
        /// ACME_SERVER_URL -&amp;gt; custom server url to generate
        /// certificates, default is lets encrypt.
        /// ACME_USER_DATA -&amp;gt; user data, if not found one will be
        /// created for the provided email,
        /// and stored in the key.
        /// </summary>
        [JsonProperty(PropertyName = "acmeUserSecretName")]
        public string AcmeUserSecretName { get; set; }

        /// <summary>
        /// Gets or sets challengeProvider details to verify domains
        /// </summary>
        [JsonProperty(PropertyName = "challengeProvider")]
        public V1beta1ChallengeProvider ChallengeProvider { get; set; }

        /// <summary>
        /// Gets or sets tries to obtain a single certificate using all domains
        /// passed into Domains. The first domain in domains is used for the
        /// CommonName field of the certificate, all other domains are added
        /// using the Subject Alternate Names extension.
        /// </summary>
        [JsonProperty(PropertyName = "domains")]
        public IList<string> Domains { get; set; }

        /// <summary>
        /// Gets or sets deprecated
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets this is the ingress Reference that will be used if
        /// provider is http Deprecated
        /// </summary>
        [JsonProperty(PropertyName = "httpProviderIngressReference")]
        public V1beta1LocalTypedReference HttpProviderIngressReference { get; set; }

        /// <summary>
        /// Gets or sets following fields are deprecated and will removed in
        /// future version. https://github.com/appscode/voyager/pull/506
        /// Deprecated. DNS Provider.
        /// </summary>
        [JsonProperty(PropertyName = "provider")]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or sets providerCredentialSecretName is used to create the
        /// acme client, that will do needed processing in DNS. Deprecated
        /// </summary>
        [JsonProperty(PropertyName = "providerCredentialSecretName")]
        public string ProviderCredentialSecretName { get; set; }

        /// <summary>
        /// Gets or sets storage backend to store the certificates currently,
        /// kubernetes secret and vault.
        /// </summary>
        [JsonProperty(PropertyName = "storage")]
        public V1beta1CertificateStorage Storage { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AcmeUserSecretName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AcmeUserSecretName");
            }
            if (ChallengeProvider == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ChallengeProvider");
            }
        }
    }
}
