// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace com.appscode.voyager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class V1beta1ACMECertificateDetails
    {
        /// <summary>
        /// Initializes a new instance of the V1beta1ACMECertificateDetails
        /// class.
        /// </summary>
        public V1beta1ACMECertificateDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1beta1ACMECertificateDetails
        /// class.
        /// </summary>
        public V1beta1ACMECertificateDetails(string certStableUrl, string certUrl, string domain, string accountRef = default(string))
        {
            AccountRef = accountRef;
            CertStableUrl = certStableUrl;
            CertUrl = certUrl;
            Domain = domain;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accountRef")]
        public string AccountRef { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certStableUrl")]
        public string CertStableUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certUrl")]
        public string CertUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CertStableUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertStableUrl");
            }
            if (CertUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertUrl");
            }
            if (Domain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Domain");
            }
        }
    }
}
