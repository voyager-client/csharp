using k8s.Models;

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace com.appscode.voyager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// HTTPIngressRuleValue is a list of http selectors pointing to backends.
    /// In the example: http://&lt;host&gt;/&lt;path&gt;?&lt;searchpart&gt;
    /// -&gt; backend where where parts of the url correspond to RFC 3986, this
    /// resource will be used to match against everything after the last '/'
    /// and before the first '?' or '#'.
    /// </summary>
    public partial class V1beta1HTTPIngressRuleValue
    {
        /// <summary>
        /// Initializes a new instance of the V1beta1HTTPIngressRuleValue
        /// class.
        /// </summary>
        public V1beta1HTTPIngressRuleValue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1beta1HTTPIngressRuleValue
        /// class.
        /// </summary>
        /// <param name="paths">A collection of paths that map requests to
        /// backends.</param>
        /// <param name="address">The network address to listen HTTP(s)
        /// connections on.</param>
        /// <param name="noTLS">Set noTLS = true to force plain text. Else,
        /// auto detect like present</param>
        /// <param name="nodePort">Specifies the node port of the referenced
        /// service.</param>
        /// <param name="port">port to listen http(s) connections.</param>
        public V1beta1HTTPIngressRuleValue(IList<V1beta1HTTPIngressPath> paths, string address = default(string), bool? noTLS = default(bool?), k8s.Models.IntstrIntOrString nodePort = default(k8s.Models.IntstrIntOrString), k8s.Models.IntstrIntOrString port = default(k8s.Models.IntstrIntOrString))
        {
            Address = address;
            NoTLS = noTLS;
            NodePort = nodePort;
            Paths = paths;
            Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the network address to listen HTTP(s) connections on.
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets set noTLS = true to force plain text. Else, auto
        /// detect like present
        /// </summary>
        [JsonProperty(PropertyName = "noTLS")]
        public bool? NoTLS { get; set; }

        /// <summary>
        /// Gets or sets specifies the node port of the referenced service.
        /// </summary>
        [JsonProperty(PropertyName = "nodePort")]
        public k8s.Models.IntstrIntOrString NodePort { get; set; }

        /// <summary>
        /// Gets or sets a collection of paths that map requests to backends.
        /// </summary>
        [JsonProperty(PropertyName = "paths")]
        public IList<V1beta1HTTPIngressPath> Paths { get; set; }

        /// <summary>
        /// Gets or sets port to listen http(s) connections.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public k8s.Models.IntstrIntOrString Port { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Paths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Paths");
            }
        }
    }
}
